const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

// Configura√ß√µes
const REPOSITORY_ID = 'cmea46o3l020esq3zk7ylfcbl'; // BennerLicense
const NUM_PULL_REQUESTS = 8000; // Aumentado significativamente para ter 150-400 por dev
const DATE_RANGE_DAYS = 90; // √öltimos 90 dias

// Fun√ß√£o para gerar data aleat√≥ria
function randomDate(start, end) {
  return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));
}

// Fun√ß√£o para gerar n√∫mero aleat√≥rio entre min e max
function randomInt(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

// Fun√ß√£o para escolher item aleat√≥rio de um array
function randomChoice(array) {
  return array[Math.floor(Math.random() * array.length)];
}

// Fun√ß√£o para distribuir desenvolvedores de forma mais equilibrada
function getBalancedDeveloper(developers, developerUsage, targetMin = 150, targetMax = 400) {
  // Verificar se h√° desenvolvedores dispon√≠veis
  if (!developers || developers.length === 0) {
    throw new Error('Nenhum desenvolvedor dispon√≠vel');
  }

  // Filtrar desenvolvedores que ainda n√£o atingiram o m√≠nimo
  const developersBelowMin = developers.filter(d => developerUsage[d.id] < targetMin);
  
  if (developersBelowMin.length > 0) {
    // Se h√° desenvolvedores abaixo do m√≠nimo, priorizar eles
    const selectedDeveloper = randomChoice(developersBelowMin);
    developerUsage[selectedDeveloper.id]++;
    return selectedDeveloper;
  }

  // Se todos j√° atingiram o m√≠nimo, distribuir entre os que n√£o atingiram o m√°ximo
  const developersBelowMax = developers.filter(d => developerUsage[d.id] < targetMax);
  
  if (developersBelowMax.length > 0) {
    // Escolher aleatoriamente entre os que n√£o atingiram o m√°ximo
    const selectedDeveloper = randomChoice(developersBelowMax);
    developerUsage[selectedDeveloper.id]++;
    return selectedDeveloper;
  }

  // Se todos atingiram o m√°ximo, distribuir aleatoriamente
  const selectedDeveloper = randomChoice(developers);
  developerUsage[selectedDeveloper.id]++;
  return selectedDeveloper;
}

// T√≠tulos de PRs para gerar dados realistas
const PR_TITLES = [
  'feat: adicionar nova funcionalidade de licenciamento',
  'fix: corrigir bug na valida√ß√£o de licen√ßa',
  'refactor: melhorar performance do sistema',
  'docs: atualizar documenta√ß√£o da API',
  'test: adicionar testes unit√°rios',
  'chore: atualizar depend√™ncias',
  'style: ajustar formata√ß√£o do c√≥digo',
  'perf: otimizar consultas ao banco',
  'ci: configurar pipeline de CI/CD',
  'build: ajustar configura√ß√£o de build',
  'feat: implementar cache de licen√ßas',
  'fix: resolver problema de concorr√™ncia',
  'refactor: simplificar l√≥gica de valida√ß√£o',
  'docs: adicionar exemplos de uso',
  'test: aumentar cobertura de testes',
  'chore: limpar c√≥digo n√£o utilizado',
  'style: aplicar padr√µes de c√≥digo',
  'perf: reduzir tempo de resposta',
  'ci: adicionar testes automatizados',
  'build: otimizar tamanho do bundle',
  'feat: adicionar valida√ß√£o de entrada',
  'fix: corrigir erro de timeout',
  'refactor: extrair componentes',
  'docs: atualizar README',
  'test: corrigir testes quebrados',
  'chore: atualizar vers√µes',
  'style: aplicar linting',
  'perf: otimizar algoritmos',
  'ci: configurar deploy autom√°tico',
  'build: ajustar webpack',
  'feat: implementar autentica√ß√£o',
  'fix: resolver bug de cache',
  'refactor: reorganizar estrutura',
  'docs: adicionar diagramas',
  'test: implementar testes E2E',
  'chore: configurar ambiente',
  'style: padronizar c√≥digo',
  'perf: melhorar queries',
  'ci: adicionar valida√ß√µes',
  'build: otimizar assets'
];

// Conte√∫dos de coment√°rios
const COMMENT_CONTENTS = [
  '√ìtimo trabalho! üëç',
  'Precisa de alguns ajustes menores',
  'LGTM! Pode fazer merge',
  'Sugest√£o: considere adicionar mais testes',
  'C√≥digo muito limpo, parab√©ns!',
  'H√° um pequeno problema aqui',
  'Funcionalidade implementada corretamente',
  'Boa refatora√ß√£o!',
  'Precisamos revisar esta abordagem',
  'Excelente documenta√ß√£o!',
  'Algumas melhorias sugeridas',
  'C√≥digo aprovado!',
  'Muito bem estruturado',
  'Faltam alguns detalhes',
  'Implementa√ß√£o s√≥lida',
  'Boa ideia!',
  'Precisa de mais contexto',
  'Funciona perfeitamente',
  'Aprova√ß√£o condicional',
  'Muito bem documentado',
  'Sugest√£o de melhoria',
  'C√≥digo limpo e eficiente',
  'Boa pr√°tica aplicada',
  'Precisa de ajustes',
  'Excelente solu√ß√£o!',
  'Bem estruturado',
  'Aprovado com sugest√µes',
  'Muito bom trabalho',
  'Precisa de revis√£o',
  'Implementa√ß√£o correta'
];

async function generateTestData() {
  console.log('üöÄ Iniciando gera√ß√£o de dados de teste...');

  try {
    // Buscar desenvolvedores existentes
    const developers = await prisma.developer.findMany({
      include: {
        team: true,
        role: true,
        stacks: true
      }
    });

    if (developers.length === 0) {
      throw new Error('Nenhum desenvolvedor encontrado no banco');
    }

    console.log(`üìä Encontrados ${developers.length} desenvolvedores`);

    // Definir per√≠odo de datas
    const endDate = new Date();
    const startDate = new Date(endDate.getTime() - (DATE_RANGE_DAYS * 24 * 60 * 60 * 1000));

    console.log(`üìÖ Gerando dados entre ${startDate.toISOString().split('T')[0]} e ${endDate.toISOString().split('T')[0]}`);

    // Controle de uso dos desenvolvedores para distribui√ß√£o equilibrada
    const developerUsage = {};
    developers.forEach(d => developerUsage[d.id] = 0);

    // Gerar Pull Requests com distribui√ß√£o equilibrada
    const pullRequests = [];
    for (let i = 0; i < NUM_PULL_REQUESTS; i++) {
      const createdDate = randomDate(startDate, endDate);
      const status = randomChoice(['active', 'completed', 'closed']);
      
      let closedDate = null;
      let mergedDate = null;
      let cycleTimeDays = null;
      let reviewTimeDays = null;

      if (status === 'completed') {
        mergedDate = randomDate(createdDate, endDate);
        cycleTimeDays = (mergedDate.getTime() - createdDate.getTime()) / (1000 * 60 * 60 * 24);
        reviewTimeDays = randomInt(1, 7); // 1-7 dias para review
      } else if (status === 'closed') {
        closedDate = randomDate(createdDate, endDate);
        cycleTimeDays = (closedDate.getTime() - createdDate.getTime()) / (1000 * 60 * 60 * 24);
      }

      // Usar distribui√ß√£o equilibrada de desenvolvedores (150-400 por dev)
      const developer = getBalancedDeveloper(developers, developerUsage, 150, 400);
      
      const pr = {
        azureId: 1000000 + i,
        title: randomChoice(PR_TITLES),
        description: `Descri√ß√£o do PR ${i + 1}`,
        status,
        sourceBranch: `feature/PR-${i + 1}`,
        targetBranch: 'main',
        createdAt: createdDate,
        updatedAt: new Date(),
        closedAt: closedDate,
        mergedAt: mergedDate,
        cycleTimeDays,
        reviewTimeDays,
        filesChanged: randomInt(1, 15),
        linesAdded: randomInt(10, 200),
        linesDeleted: randomInt(0, 50),
        isDraft: Math.random() < 0.1, // 10% chance de ser draft
        repositoryId: REPOSITORY_ID,
        createdById: developer.id
      };

      pullRequests.push(pr);
    }

    console.log(`üìù Criando ${pullRequests.length} Pull Requests...`);
    
    // Inserir Pull Requests
    const createdPRs = await prisma.pullRequest.createMany({
      data: pullRequests,
      skipDuplicates: true
    });

    console.log(`‚úÖ ${createdPRs.count} Pull Requests criados`);

    // Mostrar distribui√ß√£o de PRs por desenvolvedor
    console.log('\nüìä Distribui√ß√£o de PRs por desenvolvedor:');
    Object.entries(developerUsage).forEach(([devId, count]) => {
      const dev = developers.find(d => d.id === devId);
      console.log(`   ‚Ä¢ ${dev?.name || devId}: ${count} PRs`);
    });

    // Buscar PRs criados para gerar reviews e comments
    const createdPRsData = await prisma.pullRequest.findMany({
      where: {
        repositoryId: REPOSITORY_ID,
        azureId: {
          gte: 1000000
        }
      }
    });

    console.log(`\nüîç Encontrados ${createdPRsData.length} PRs para adicionar reviews e comments`);

    // Gerar Reviews com distribui√ß√£o equilibrada
    const reviews = [];
    const reviewUsage = {};
    developers.forEach(d => reviewUsage[d.id] = 0);

    for (const pr of createdPRsData) {
      const numReviews = randomInt(1, 4); // 1-4 reviews por PR
      
      for (let j = 0; j < numReviews; j++) {
        // Escolher reviewer diferente do autor e com distribui√ß√£o equilibrada
        const availableReviewers = developers.filter(d => d.id !== pr.createdById);
        const reviewer = getBalancedDeveloper(availableReviewers, reviewUsage, 150, 400);
        const reviewDate = randomDate(pr.createdAt, new Date());
        
        const review = {
          azureId: 2000000 + reviews.length,
          status: randomChoice(['approved', 'rejected', 'waitForAuthor']),
          vote: randomChoice([10, -10, 0]),
          createdAt: reviewDate,
          updatedAt: reviewDate,
          pullRequestId: pr.id,
          reviewerId: reviewer.id
        };
        
        reviews.push(review);
      }
    }

    console.log(`üëÄ Criando ${reviews.length} Reviews...`);
    
    const createdReviews = await prisma.review.createMany({
      data: reviews,
      skipDuplicates: true
    });

    console.log(`‚úÖ ${createdReviews.count} Reviews criados`);

    // Gerar Comments com distribui√ß√£o equilibrada
    const comments = [];
    const commentUsage = {};
    developers.forEach(d => commentUsage[d.id] = 0);

    for (const pr of createdPRsData) {
      const numComments = randomInt(0, 6); // 0-6 comments por PR
      
      for (let j = 0; j < numComments; j++) {
        const author = getBalancedDeveloper(developers, commentUsage, 150, 400);
        const commentDate = randomDate(pr.createdAt, new Date());
        
        const comment = {
          azureId: 3000000 + comments.length,
          content: randomChoice(COMMENT_CONTENTS),
          createdAt: commentDate,
          updatedAt: commentDate,
          pullRequestId: pr.id,
          authorId: author.id
        };
        
        comments.push(comment);
      }
    }

    console.log(`üí¨ Criando ${comments.length} Comments...`);
    
    const createdComments = await prisma.comment.createMany({
      data: comments,
      skipDuplicates: true
    });

    console.log(`‚úÖ ${createdComments.count} Comments criados`);

    // Gerar Commits com distribui√ß√£o equilibrada
    const commits = [];
    const commitUsage = {};
    developers.forEach(d => commitUsage[d.id] = 0);

    for (const pr of createdPRsData) {
      const numCommits = randomInt(1, 8); // 1-8 commits por PR
      
      for (let j = 0; j < numCommits; j++) {
        const commitDate = randomDate(pr.createdAt, pr.mergedAt || new Date());
        
        const commit = {
          azureId: `commit-${4000000 + commits.length}`,
          message: `feat: implementa√ß√£o ${j + 1} do PR ${pr.azureId}`,
          hash: `abc123def456${commits.length.toString().padStart(6, '0')}`,
          createdAt: commitDate,
          repositoryId: REPOSITORY_ID,
          authorId: pr.createdById
        };
        
        commits.push(commit);
        commitUsage[pr.createdById]++;
      }
    }

    console.log(`üîß Criando ${commits.length} Commits...`);
    
    const createdCommits = await prisma.commit.createMany({
      data: commits,
      skipDuplicates: true
    });

    console.log(`‚úÖ ${createdCommits.count} Commits criados`);

    // Atualizar lastSyncAt do reposit√≥rio
    await prisma.repository.update({
      where: { id: REPOSITORY_ID },
      data: { lastSyncAt: new Date() }
    });

    console.log('üéâ Gera√ß√£o de dados de teste conclu√≠da com sucesso!');
    
    // Resumo final
    const summary = await prisma.pullRequest.aggregate({
      where: { repositoryId: REPOSITORY_ID },
      _count: { id: true },
      _avg: { cycleTimeDays: true }
    });

    console.log('\nüìä Resumo dos dados gerados:');
    console.log(`   ‚Ä¢ Pull Requests: ${summary._count.id}`);
    console.log(`   ‚Ä¢ Reviews: ${reviews.length}`);
    console.log(`   ‚Ä¢ Comments: ${comments.length}`);
    console.log(`   ‚Ä¢ Commits: ${commits.length}`);
    console.log(`   ‚Ä¢ Cycle Time M√©dio: ${summary._avg.cycleTimeDays?.toFixed(2) || 0} dias`);

    // Mostrar distribui√ß√£o final
    console.log('\nüìà Distribui√ß√£o final por desenvolvedor:');
    console.log('   PRs | Reviews | Comments | Commits | Desenvolvedor');
    console.log('   ----|---------|----------|---------|-------------');
    developers.forEach(dev => {
      const prCount = developerUsage[dev.id] || 0;
      const reviewCount = reviewUsage[dev.id] || 0;
      const commentCount = commentUsage[dev.id] || 0;
      const commitCount = commitUsage[dev.id] || 0;
      console.log(`   ${prCount.toString().padStart(3)} | ${reviewCount.toString().padStart(7)} | ${commentCount.toString().padStart(8)} | ${commitCount.toString().padStart(7)} | ${dev.name}`);
    });

  } catch (error) {
    console.error('‚ùå Erro ao gerar dados de teste:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// Executar o script
if (require.main === module) {
  generateTestData()
    .then(() => {
      console.log('‚úÖ Script executado com sucesso!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Erro na execu√ß√£o do script:', error);
      process.exit(1);
    });
}

module.exports = { generateTestData };
