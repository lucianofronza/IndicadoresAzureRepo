const { PrismaClient } = require('@prisma/client');
const axios = require('axios');

const prisma = new PrismaClient();

async function testIncrementalSync() {
  console.log('üîç Testando sincroniza√ß√£o incremental do BServer...\n');
  
  try {
    // Buscar o reposit√≥rio BServer
    const repository = await prisma.repository.findFirst({
      where: { name: 'BServer' }
    });
    
    if (!repository) {
      console.log('‚ùå Reposit√≥rio BServer n√£o encontrado');
      return;
    }
    
    console.log(`üìã Reposit√≥rio: ${repository.name}`);
    console.log(`üîó URL: ${repository.url}`);
    console.log(`üìÖ √öltima sincroniza√ß√£o: ${repository.lastSyncAt || 'Nunca'}\n`);
    
    // Verificar dados atuais
    const currentPRs = await prisma.pullRequest.count({
      where: { repositoryId: repository.id }
    });
    
    const currentCommits = await prisma.commit.count({
      where: { repositoryId: repository.id }
    });
    
    console.log(`üìä Dados atuais:`);
    console.log(`  - Pull Requests: ${currentPRs}`);
    console.log(`  - Commits: ${currentCommits}`);
    
    // Iniciar uma sincroniza√ß√£o incremental
    console.log('\nüîÑ Iniciando sincroniza√ß√£o INCREMENTAL...');
    
    const response = await axios.post(`http://localhost:8080/api/sync/${repository.id}`, {
      syncType: 'incremental'
    }, {
      headers: {
        'Content-Type': 'application/json'
      },
      timeout: 300000 // 5 minutos
    });
    
    console.log('‚úÖ Sincroniza√ß√£o incremental iniciada com sucesso');
    console.log(`üìã Job ID: ${response.data.data?.id || 'N/A'}`);
    
    // Aguardar processamento
    console.log('\n‚è≥ Aguardando processamento...');
    await new Promise(resolve => setTimeout(resolve, 30000)); // 30 segundos
    
    // Verificar dados ap√≥s sincroniza√ß√£o
    const newPRs = await prisma.pullRequest.count({
      where: { repositoryId: repository.id }
    });
    
    const newCommits = await prisma.commit.count({
      where: { repositoryId: repository.id }
    });
    
    console.log(`\nüìä Dados ap√≥s sincroniza√ß√£o incremental:`);
    console.log(`  - Pull Requests: ${newPRs} (diferen√ßa: ${newPRs - currentPRs})`);
    console.log(`  - Commits: ${newCommits} (diferen√ßa: ${newCommits - currentCommits})`);
    
    // Verificar se houve mudan√ßas
    if (newPRs > currentPRs) {
      console.log('\nüìà Novos PRs detectados na sincroniza√ß√£o incremental!');
    } else {
      console.log('\n‚úÖ Nenhum novo PR detectado (esperado para incremental)');
    }
    
    if (newCommits > currentCommits) {
      console.log('üìà Novos commits detectados na sincroniza√ß√£o incremental!');
    } else {
      console.log('‚úÖ Nenhum novo commit detectado (esperado se n√£o houver novos commits)');
    }
    
    // Verificar jobs recentes
    const recentJobs = await prisma.syncJob.findMany({
      where: { repositoryId: repository.id },
      orderBy: { createdAt: 'desc' },
      take: 3
    });
    
    console.log('\nüìã Jobs recentes:');
    recentJobs.forEach(job => {
      console.log(`  - ${job.status} (${job.syncType}) - ${job.createdAt}`);
      if (job.error) {
        console.log(`    Erro: ${job.error}`);
      }
    });
    
    // Verificar se a l√≥gica incremental est√° funcionando
    console.log('\nüîç An√°lise da l√≥gica incremental:');
    if (repository.lastSyncAt) {
      console.log(`‚úÖ Reposit√≥rio tem √∫ltima sincroniza√ß√£o: ${repository.lastSyncAt.toISOString()}`);
      console.log(`‚úÖ Sincroniza√ß√£o incremental deve buscar dados ap√≥s: ${repository.lastSyncAt.toISOString()}`);
    } else {
      console.log(`‚ö†Ô∏è  Reposit√≥rio n√£o tem √∫ltima sincroniza√ß√£o - deve fazer sincroniza√ß√£o completa`);
    }
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error.message);
    if (error.response) {
      console.error('Status:', error.response.status);
      console.error('Data:', error.response.data);
    }
  } finally {
    await prisma.$disconnect();
  }
}

// Executar o teste
testIncrementalSync();
