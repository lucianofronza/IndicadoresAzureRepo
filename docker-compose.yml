version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: indicadores-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-indicadores_azure}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-indicadores_azure}"]
      interval: ${HEALTH_CHECK_INTERVAL:-30s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-10s}
      retries: ${HEALTH_CHECK_RETRIES:-3}
    networks:
      - indicadores-network-prod

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: indicadores-redis-prod
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data_prod:/data
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_DB: ${REDIS_DB:-0}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: ${HEALTH_CHECK_INTERVAL:-30s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-10s}
      retries: ${HEALTH_CHECK_RETRIES:-3}
    networks:
      - indicadores-network-prod

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: indicadores-backend-prod
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-indicadores_azure}
      REDIS_HOST: redis
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_URL: redis://redis:${REDIS_PORT:-6379}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_DB: ${REDIS_DB:-0}
      PORT: ${PORT:-8080}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:5173}
    ports:
      - "${BACKEND_PORT:-8080}:${PORT:-8080}"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - /app/node_modules
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:${PORT:-8080}/healthz"]
      interval: ${HEALTH_CHECK_INTERVAL:-30s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-10s}
      retries: ${HEALTH_CHECK_RETRIES:-3}
      start_period: 40s
    networks:
      - indicadores-network-prod
    restart: unless-stopped

  # Sync Service
  sync-service:
    build:
      context: ./sync-service
      dockerfile: Dockerfile
    container_name: indicadores-sync-service-prod
    environment:
      - NODE_ENV=production
      - PORT=8080
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
      - SERVICE_API_KEY=${SYNC_SERVICE_API_KEY}
      - BACKEND_API_KEY=${BACKEND_API_KEY}
      - BACKEND_URL=http://backend:8080
      - AZURE_DEVOPS_BASE_URL=${AZURE_DEVOPS_BASE_URL:-https://dev.azure.com}
      - AZURE_RATE_LIMIT_PER_MINUTE=${AZURE_RATE_LIMIT_PER_MINUTE:-60}
      - AZURE_BURST_LIMIT=${AZURE_BURST_LIMIT:-10}
      - MAX_CONCURRENT_REPOS=${MAX_CONCURRENT_REPOS:-3}
      - DELAY_BETWEEN_REPOS_SECONDS=${DELAY_BETWEEN_REPOS_SECONDS:-30}
      - DEFAULT_SYNC_INTERVAL_MINUTES=${DEFAULT_SYNC_INTERVAL_MINUTES:-30}
      - MAX_RETRIES=${MAX_RETRIES:-3}
      - RETRY_DELAY_MINUTES=${RETRY_DELAY_MINUTES:-5}
      - NOTIFICATION_ENABLED=${NOTIFICATION_ENABLED:-true}
      - NOTIFICATION_EMAILS=${NOTIFICATION_EMAILS}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    ports:
      - "8081:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - indicadores-network-prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: indicadores-frontend-prod
    ports:
      - "${FRONTEND_PORT:-5173}:5173"
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - /app/node_modules
    user: "1001:1001"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5173/"]
      interval: ${HEALTH_CHECK_INTERVAL:-30s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-10s}
      retries: ${HEALTH_CHECK_RETRIES:-3}
      start_period: 10s
    networks:
      - indicadores-network-prod
    restart: unless-stopped

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local

networks:
  indicadores-network-prod:
    driver: bridge
