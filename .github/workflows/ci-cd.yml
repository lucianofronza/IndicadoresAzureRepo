name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Lint and Test Backend
  backend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: './backend/package-lock.json'

    - name: Install dependencies
      run: npm ci

    - name: Run linter
      run: npm run lint

    - name: Run tests
      run: npm run test:coverage
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379

        ENCRYPTION_KEY: test-encryption-key-32-chars!!

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage

  # Lint and Test Frontend
  frontend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'

    - name: Install dependencies
      run: npm ci

    - name: Run linter
      run: npm run lint

    - name: Run tests
      run: npm run test:coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run npm audit
      run: |
        cd backend && npm audit --audit-level=moderate
        cd ../frontend && npm audit --audit-level=moderate

  # Build and Push Images
  build-images:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha

    - name: Build and push Backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Extract metadata
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha

    - name: Build and push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-images
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to staging
      run: |
        # Update image tags in manifests
        sed -i "s|image: .*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}|g" infra/k8s/deployment-backend.yaml
        sed -i "s|image: .*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}|g" infra/k8s/deployment-frontend.yaml
        
        # Apply manifests
        kubectl apply -f infra/k8s/namespace.yaml
        kubectl apply -f infra/k8s/configmap.yaml
        kubectl apply -f infra/k8s/secret.yaml
        kubectl apply -f infra/k8s/deployment-backend.yaml
        kubectl apply -f infra/k8s/service-backend.yaml
        kubectl apply -f infra/k8s/deployment-frontend.yaml
        kubectl apply -f infra/k8s/service-frontend.yaml
        kubectl apply -f infra/k8s/deployment-redis.yaml
        kubectl apply -f infra/k8s/service-redis.yaml
        kubectl apply -f infra/k8s/ingress.yaml

    - name: Wait for deployment
      run: |
        export KUBECONFIG=kubeconfig
        kubectl rollout status deployment/indicadores-backend -n indicadores --timeout=300s
        kubectl rollout status deployment/indicadores-frontend -n indicadores --timeout=300s

    - name: Run smoke tests
      run: |
        export KUBECONFIG=kubeconfig
        # Wait for services to be ready
        sleep 30
        
        # Test health endpoints
        kubectl port-forward service/indicadores-backend 8080:8080 -n indicadores &
        sleep 10
        curl -f http://localhost:8080/healthz || exit 1
        curl -f http://localhost:8080/readyz || exit 1

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: build-images
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to production
      run: |
        # Update image tags in manifests
        sed -i "s|image: .*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}|g" infra/k8s/deployment-backend.yaml
        sed -i "s|image: .*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}|g" infra/k8s/deployment-frontend.yaml
        
        # Apply manifests
        kubectl apply -f infra/k8s/namespace.yaml
        kubectl apply -f infra/k8s/configmap.yaml
        kubectl apply -f infra/k8s/secret.yaml
        kubectl apply -f infra/k8s/deployment-backend.yaml
        kubectl apply -f infra/k8s/service-backend.yaml
        kubectl apply -f infra/k8s/hpa-backend.yaml
        kubectl apply -f infra/k8s/deployment-frontend.yaml
        kubectl apply -f infra/k8s/service-frontend.yaml
        kubectl apply -f infra/k8s/hpa-frontend.yaml
        kubectl apply -f infra/k8s/deployment-redis.yaml
        kubectl apply -f infra/k8s/service-redis.yaml
        kubectl apply -f infra/k8s/ingress.yaml

    - name: Wait for deployment
      run: |
        export KUBECONFIG=kubeconfig
        kubectl rollout status deployment/indicadores-backend -n indicadores --timeout=300s
        kubectl rollout status deployment/indicadores-frontend -n indicadores --timeout=300s

    - name: Run smoke tests
      run: |
        export KUBECONFIG=kubeconfig
        # Wait for services to be ready
        sleep 30
        
        # Test health endpoints
        kubectl port-forward service/indicadores-backend 8080:8080 -n indicadores &
        sleep 10
        curl -f http://localhost:8080/healthz || exit 1
        curl -f http://localhost:8080/readyz || exit 1

    - name: Notify deployment
      if: success()
      run: |
        echo "ðŸš€ Production deployment successful!"
        echo "Commit: ${{ github.sha }}"
        echo "Author: ${{ github.actor }}"
        echo "Branch: ${{ github.ref }}"

  # Rollback on failure
  rollback:
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: failure() && (needs.deploy-production.result == 'failure' || needs.deploy-staging.result == 'failure')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Rollback deployment
      run: |
        if [ "${{ needs.deploy-production.result }}" == "failure" ]; then
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          kubectl rollout undo deployment/indicadores-backend -n indicadores
          kubectl rollout undo deployment/indicadores-frontend -n indicadores
        fi
        
        if [ "${{ needs.deploy-staging.result }}" == "failure" ]; then
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          kubectl rollout undo deployment/indicadores-backend -n indicadores
          kubectl rollout undo deployment/indicadores-frontend -n indicadores
        fi

    - name: Notify rollback
      run: |
        echo "ðŸ”„ Deployment rolled back due to failure"
        echo "Please check the logs and fix the issue"
