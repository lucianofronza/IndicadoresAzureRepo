name: CI/CD Pipeline

# yamllint disable rule:line-length
# shellcheck disable=all

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
      - 'fix/**'
  pull_request:
    branches:
      - main
      - develop

jobs:
  # Job 1: Lint Backend
  lint-backend:
    name: Lint Backend
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: Install dependencies
        working-directory: backend
        run: npm ci
      
      - name: Run ESLint
        working-directory: backend
        run: npm run lint

  # Job 2: Lint Frontend
  lint-frontend:
    name: Lint Frontend
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
      
      - name: Run ESLint
        working-directory: frontend
        run: npm run lint

  # Job 3: Test Backend
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    needs: lint-backend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: Install dependencies
        working-directory: backend
        run: npm ci
      
      - name: Run tests with coverage
        working-directory: backend
        run: npm test -- --coverage --ci --maxWorkers=2
        env:
          NODE_ENV: test
      
      - name: Upload coverage to Codecov
        # Opcional: Configure CODECOV_TOKEN secret para habilitar upload
        continue-on-error: true
        uses: codecov/codecov-action@v4
        with:
          files: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false
          # Token é opcional - workflow continua sem ele
          # actionlint-ignore: expression
          token: ${{ secrets.CODECOV_TOKEN || '' }}

  # Job 4: Build Backend
  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    needs: test-backend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: Install dependencies
        working-directory: backend
        run: npm ci
      
      - name: Build application
        working-directory: backend
        run: npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-dist
          path: backend/dist
          retention-days: 7

  # Job 5: Build Frontend
  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: lint-frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
      
      - name: Build application
        working-directory: frontend
        run: npm run build
        env:
          NODE_ENV: production
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist
          retention-days: 7

  # Job 6: Docker Build (apenas em main e develop com secrets configurados)
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    # Executa apenas se for push para main/develop (secrets opcionais)
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    # actionlint-ignore: expression
    env:
      # Secrets opcionais - warnings esperados
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Docker Hub
        # Opcional: Configure DOCKER_USERNAME e DOCKER_PASSWORD secrets para habilitar push
        continue-on-error: true
        if: env.DOCKER_USERNAME != '' && env.DOCKER_PASSWORD != ''
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}
      
      - name: Extract metadata (tags, labels) for Backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: indicadores/indicadores-backend
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
      
      - name: Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: ${{ env.DOCKER_USERNAME != '' && env.DOCKER_PASSWORD != '' }}
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=registry,ref=indicadores/indicadores-backend:buildcache
          cache-to: type=registry,ref=indicadores/indicadores-backend:buildcache,mode=max
      
      - name: Extract metadata (tags, labels) for Frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: indicadores/indicadores-frontend
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
      
      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: ${{ env.DOCKER_USERNAME != '' && env.DOCKER_PASSWORD != '' }}
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=registry,ref=indicadores/indicadores-frontend:buildcache
          cache-to: type=registry,ref=indicadores/indicadores-frontend:buildcache,mode=max

  # Job 7: Notificação de Sucesso
  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    if: success()
    
    steps:
      - name: Send success notification
        run: |
          echo "✅ CI/CD Pipeline completed successfully!"
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"
