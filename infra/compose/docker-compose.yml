version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: indicadores-postgres
    environment:
      POSTGRES_DB: indicadores_azure
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d indicadores_azure"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - indicadores-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: indicadores-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - indicadores-network

  # Backend API
  backend:
    build:
      context: ../../backend
      dockerfile: Dockerfile
    container_name: indicadores-backend
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://user:password@postgres:5432/indicadores_azure
      REDIS_URL: redis://redis:6379
      PORT: 8080
      LOG_LEVEL: debug
      # Azure DevOps OAuth (configure these)
      AZURE_CLIENT_ID: ${AZURE_CLIENT_ID:-}
      AZURE_CLIENT_SECRET: ${AZURE_CLIENT_SECRET:-}
      AZURE_REDIRECT_URI: http://localhost:8080/auth/azure/callback

      # Frontend URL
      FRONTEND_URL: http://localhost:5173
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../../backend:/app
      - /app/node_modules
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - indicadores-network
    restart: unless-stopped

  # Frontend (will be created later)
  frontend:
    build:
      context: ../../frontend
      dockerfile: Dockerfile
    container_name: indicadores-frontend
    ports:
      - "5173:80"
    depends_on:
      - backend
    networks:
      - indicadores-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  indicadores-network:
    driver: bridge
