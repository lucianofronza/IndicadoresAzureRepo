import { useState, useEffect } from 'react'
import { useQuery } from '@tanstack/react-query'
import { PaginatedSelect } from '@/components/PaginatedSelect'
import ReactApexChart from 'react-apexcharts'
import { 
  GitPullRequest, 
  MessageSquare, 
  Users,
  Filter,
  TrendingUp,
  AlertCircle,
  GitCommit,
  MessageCircle,
  Building2,
  UserCheck,
  Layers
} from 'lucide-react'
import { DashboardFilters, KPI } from '@/types'
import { formatNumber, formatDuration } from '@/lib/utils'
import api from '@/services/api'

// Cores padronizadas para os gráficos
const COLORS = {
  // Cores principais para métricas
  primary: '#3b82f6',      // Azul - Pull Requests, Reviews
  secondary: '#10b981',    // Verde - Commits, Total
  accent: '#f59e0b',       // Laranja - Média, Cycle Time
  purple: '#8b5cf6',       // Roxo - Pull Requests (linha)
  
  // Cores para rótulos
  labelWhite: '#ffffff',
  labelBlack: '#000000',
  
  // Array para gráficos que precisam de múltiplas cores
  array: ['#3b82f6', '#10b981', '#f59e0b', '#8b5cf6', '#ef4444', '#06b6d4', '#84cc16', '#f97316']
}

export const Dashboard: React.FC = () => {
  const [filters, setFilters] = useState<DashboardFilters>({
    startDate: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
    endDate: new Date().toISOString().split('T')[0],
  })

  // Estado local para as datas durante a digitação
  const [localDates, setLocalDates] = useState({
    startDate: filters.startDate,
    endDate: filters.endDate,
  })

  // Função para aplicar as datas quando o usuário sair do campo
  const applyDateFilter = (field: 'startDate' | 'endDate', value: string) => {
    // Validar se a data é válida
    if (value && !isNaN(Date.parse(value))) {
      setFilters(prev => ({ ...prev, [field]: value }))
    }
  }

  // Função para lidar com mudanças locais nas datas
  const handleDateChange = (field: 'startDate' | 'endDate', value: string) => {
    setLocalDates(prev => ({ ...prev, [field]: value }))
  }

  // Função para lidar com o evento de sair do campo (blur)
  const handleDateBlur = (field: 'startDate' | 'endDate') => {
    const value = localDates[field]
    if (value && value !== filters[field]) {
      applyDateFilter(field, value)
    }
  }

  // Função para lidar com o evento de pressionar Enter
  const handleDateKeyDown = (field: 'startDate' | 'endDate', e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter') {
      const value = localDates[field]
      if (value && value !== filters[field]) {
        applyDateFilter(field, value)
      }
      ;(e.target as HTMLInputElement).blur()
    }
  }

  // Atualizar estado local quando os filtros mudam
  useEffect(() => {
    setLocalDates({
      startDate: filters.startDate,
      endDate: filters.endDate,
    })
  }, [filters.startDate, filters.endDate])

  const { data: kpis, isLoading, error } = useQuery({
    queryKey: ['kpis', filters],
    queryFn: async () => {
      const params = new URLSearchParams()
      Object.entries(filters).forEach(([key, value]) => {
        if (value) params.append(key, value)
      })
      
      const response = await api.get(`/kpis?${params.toString()}`)
      return response.data.data as KPI
    },
  })





  // Additional KPI queries
  const { data: prReviewComments } = useQuery({
    queryKey: ['kpis-pr-review-comments', filters],
    queryFn: async () => {
      const params = new URLSearchParams()
      Object.entries(filters).forEach(([key, value]) => {
        if (value) params.append(key, value)
      })
      
      const response = await api.get(`/kpis/pr-review-comments?${params.toString()}`)
      return response.data.data
    },
  })

  const { data: cycleTimeDistributionData } = useQuery({
    queryKey: ['kpis-cycle-time', filters],
    queryFn: async () => {
      const params = new URLSearchParams()
      Object.entries(filters).forEach(([key, value]) => {
        if (value) params.append(key, value)
      })
      
      const response = await api.get(`/kpis/cycle-time?${params.toString()}`)
      return response.data.data
    },
  })

  const { data: prCommitData } = useQuery({
    queryKey: ['kpis-pr-commit', filters],
    queryFn: async () => {
      const params = new URLSearchParams()
      Object.entries(filters).forEach(([key, value]) => {
        if (value) params.append(key, value)
      })
      
      const response = await api.get(`/kpis/pr-commit?${params.toString()}`)
      return response.data.data
    },
  })

  const { data: prReviewData } = useQuery({
    queryKey: ['kpis-pr-review-team', filters],
    queryFn: async () => {
      const params = new URLSearchParams()
      Object.entries(filters).forEach(([key, value]) => {
        if (value) params.append(key, value)
      })
      
      const response = await api.get(`/kpis/pr-review-team?${params.toString()}`)
      return response.data.data
    },
  })

  const { data: reviewsPerformedData } = useQuery({
    queryKey: ['kpis-reviews-performed-team', filters],
    queryFn: async () => {
      const params = new URLSearchParams()
      Object.entries(filters).forEach(([key, value]) => {
        if (value) params.append(key, value)
      })
      
      const response = await api.get(`/kpis/reviews-performed-team?${params.toString()}`)
      return response.data.data
    },
  })

  const { data: filesChangedData } = useQuery({
    queryKey: ['kpis-files-changed-team', filters],
    queryFn: async () => {
      const params = new URLSearchParams()
      Object.entries(filters).forEach(([key, value]) => {
        if (value) params.append(key, value)
      })
      
      const response = await api.get(`/kpis/files-changed-team?${params.toString()}`)
      return response.data.data
    },
  })

  const { data: cycleTimeByTeamData } = useQuery({
    queryKey: ['kpis-cycle-time-team', filters],
    queryFn: async () => {
      const params = new URLSearchParams()
      Object.entries(filters).forEach(([key, value]) => {
        if (value) params.append(key, value)
      })
      
      const response = await api.get(`/kpis/cycle-time-team?${params.toString()}`)
      return response.data.data
    },
  })

  const { data: topCycleTimePRs } = useQuery({
    queryKey: ['kpis-top-cycle-time-prs', filters],
    queryFn: async () => {
      const params = new URLSearchParams()
      Object.entries(filters).forEach(([key, value]) => {
        if (value) params.append(key, value)
      })
      
      const response = await api.get(`/kpis/top-cycle-time-prs?${params.toString()}`)
      return response.data.data
    },
  })





  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"></div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-center">
          <AlertCircle className="h-12 w-12 text-red-500 mx-auto mb-4" />
          <h3 className="text-lg font-medium text-gray-900 mb-2">Erro ao carregar dados</h3>
          <p className="text-gray-500">Não foi possível carregar os dados do dashboard. Tente novamente.</p>
        </div>
      </div>
    )
  }



  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Dashboard</h1>
          <p className="mt-1 text-sm text-gray-500">
            Análise de indicadores de desenvolvedores
          </p>
        </div>
        <div className="flex items-center gap-2">
          <TrendingUp className="h-5 w-5 text-gray-400" />
          <span className="text-sm text-gray-500">
            Última atualização: {new Date().toLocaleString('pt-BR')}
          </span>
        </div>
      </div>

      {/* Filters */}
      <div className="card p-6">
        <div className="flex items-center gap-2 mb-4">
          <Filter className="h-5 w-5 text-gray-500" />
          <h3 className="text-lg font-medium text-gray-900">Filtros</h3>
        </div>
        {/* Todos os Filtros em uma linha */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-6 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1" htmlFor="start-date">
              Data Início
            </label>
            <input
              id="start-date"
              type="date"
              value={localDates.startDate || ''}
              onChange={(e) => handleDateChange('startDate', e.target.value)}
              onBlur={() => handleDateBlur('startDate')}
              onKeyDown={(e) => handleDateKeyDown('startDate', e)}
              className="input w-full pr-8 [&::-webkit-calendar-picker-indicator]:absolute [&::-webkit-calendar-picker-indicator]:right-2 [&::-webkit-calendar-picker-indicator]:top-1/2 [&::-webkit-calendar-picker-indicator]:transform [&::-webkit-calendar-picker-indicator]:-translate-y-1/2 [&::-webkit-calendar-picker-indicator]:cursor-pointer relative"
              tabIndex={1}
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1" htmlFor="end-date">
              Data Fim
            </label>
            <input
              id="end-date"
              type="date"
              value={localDates.endDate || ''}
              onChange={(e) => handleDateChange('endDate', e.target.value)}
              onBlur={() => handleDateBlur('endDate')}
              onKeyDown={(e) => handleDateKeyDown('endDate', e)}
              className="input w-full pr-8 [&::-webkit-calendar-picker-indicator]:absolute [&::-webkit-calendar-picker-indicator]:right-2 [&::-webkit-calendar-picker-indicator]:top-1/2 [&::-webkit-calendar-picker-indicator]:transform [&::-webkit-calendar-picker-indicator]:-translate-y-1/2 [&::-webkit-calendar-picker-indicator]:cursor-pointer relative"
              tabIndex={2}
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Time
            </label>
            <PaginatedSelect
              value={filters.teamId || ''}
              onChange={(value) => setFilters(prev => ({ ...prev, teamId: value }))}
              placeholder="Todos os times"
              endpoint="/teams"
              labelKey="name"
              valueKey="id"
              className="w-full"
              tabIndex={3}
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Cargo
            </label>
            <PaginatedSelect
              value={filters.roleId || ''}
              onChange={(value) => setFilters(prev => ({ ...prev, roleId: value }))}
              placeholder="Todos os cargos"
              endpoint="/roles"
              labelKey="name"
              valueKey="id"
              className="w-full"
              tabIndex={4}
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Stack
            </label>
            <PaginatedSelect
              value={filters.stackId || ''}
              onChange={(value) => setFilters(prev => ({ ...prev, stackId: value }))}
              placeholder="Todas as stacks"
              endpoint="/stacks"
              labelKey="name"
              valueKey="id"
              className="w-full"
              tabIndex={5}
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Desenvolvedor
            </label>
            <PaginatedSelect
              value={filters.developerId || ''}
              onChange={(value) => setFilters(prev => ({ ...prev, developerId: value }))}
              placeholder="Todos os desenvolvedores"
              endpoint="/developers"
              labelKey="name"
              valueKey="id"
              className="w-full"
              tabIndex={6}
            />
          </div>
        </div>

        {/* Períodos Rápidos */}
        <div className="mt-4">
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Períodos Rápidos
          </label>
          <div className="flex gap-2">
            <button
              onClick={() => setFilters({
                startDate: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
                endDate: new Date().toISOString().split('T')[0],
              })}
              className="btn btn-secondary btn-sm"
              tabIndex={7}
            >
              Últimos 7 dias
            </button>
            <button
              onClick={() => setFilters({
                startDate: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
                endDate: new Date().toISOString().split('T')[0],
              })}
              className="btn btn-secondary btn-sm"
              tabIndex={8}
            >
              Últimos 30 dias
            </button>
            <button
              onClick={() => setFilters({
                startDate: new Date(new Date().getFullYear(), new Date().getMonth(), 1).toISOString().split('T')[0],
                endDate: new Date().toISOString().split('T')[0],
              })}
              className="btn btn-secondary btn-sm"
              tabIndex={9}
            >
              Este mês
            </button>
          </div>
        </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Time
            </label>
            <PaginatedSelect
              value={filters.teamId || ''}
              onChange={(value) => setFilters(prev => ({ ...prev, teamId: value }))}
              placeholder="Todos os times"
              endpoint="/teams"
              labelKey="name"
              valueKey="id"
              className="w-full"
              tabIndex={3}
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Cargo
            </label>
            <PaginatedSelect
              value={filters.roleId || ''}
              onChange={(value) => setFilters(prev => ({ ...prev, roleId: value }))}
              placeholder="Todos os cargos"
              endpoint="/roles"
              labelKey="name"
              valueKey="id"
              className="w-full"
              tabIndex={4}
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Stack
            </label>
            <PaginatedSelect
              value={filters.stackId || ''}
              onChange={(value) => setFilters(prev => ({ ...prev, stackId: value }))}
              placeholder="Todas as stacks"
              endpoint="/stacks"
              labelKey="name"
              valueKey="id"
              className="w-full"
              tabIndex={5}
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Desenvolvedor
            </label>
            <PaginatedSelect
              value={filters.developerId || ''}
              onChange={(value) => setFilters(prev => ({ ...prev, developerId: value }))}
              placeholder="Todos os desenvolvedores"
              endpoint="/developers"
              labelKey="name"
              valueKey="id"
              className="w-full"
              tabIndex={6}
            />
          </div>
        </div>
      </div>

      {/* KPI Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 xl:grid-cols-8 gap-4">
        <div className="card p-4">
          <div className="flex items-center">
            <div className="flex-shrink-0">
              <GitPullRequest className="h-6 w-6 text-blue-600" />
            </div>
            <div className="ml-3">
              <p className="text-xs font-medium text-gray-500">Pull Requests</p>
              <p className="text-lg font-bold text-gray-900">
                {formatNumber(kpis?.totalPullRequests || 0)}
              </p>
            </div>
          </div>
        </div>

        <div className="card p-4">
          <div className="flex items-center">
            <div className="flex-shrink-0">
              <MessageSquare className="h-6 w-6 text-green-600" />
            </div>
            <div className="ml-3">
              <p className="text-xs font-medium text-gray-500">Reviews</p>
              <p className="text-lg font-bold text-gray-900">
                {formatNumber(kpis?.totalReviews || 0)}
              </p>
            </div>
          </div>
        </div>

        <div className="card p-4">
          <div className="flex items-center">
            <div className="flex-shrink-0">
              <GitCommit className="h-6 w-6 text-purple-600" />
            </div>
            <div className="ml-3">
              <p className="text-xs font-medium text-gray-500">Commits</p>
              <p className="text-lg font-bold text-gray-900">
                {formatNumber(kpis?.totalCommits || 0)}
              </p>
            </div>
          </div>
        </div>

        <div className="card p-4">
          <div className="flex items-center">
            <div className="flex-shrink-0">
              <MessageCircle className="h-6 w-6 text-orange-600" />
            </div>
            <div className="ml-3">
              <p className="text-xs font-medium text-gray-500">Comments</p>
              <p className="text-lg font-bold text-gray-900">
                {formatNumber(kpis?.totalComments || 0)}
              </p>
            </div>
          </div>
        </div>

        <div className="card p-4">
          <div className="flex items-center">
            <div className="flex-shrink-0">
              <Building2 className="h-6 w-6 text-indigo-600" />
            </div>
            <div className="ml-3">
              <p className="text-xs font-medium text-gray-500">Times</p>
              <p className="text-lg font-bold text-gray-900">
                {formatNumber(kpis?.totalTeams || 0)}
              </p>
            </div>
          </div>
        </div>

        <div className="card p-4">
          <div className="flex items-center">
            <div className="flex-shrink-0">
              <UserCheck className="h-6 w-6 text-teal-600" />
            </div>
            <div className="ml-3">
              <p className="text-xs font-medium text-gray-500">Cargos</p>
              <p className="text-lg font-bold text-gray-900">
                {formatNumber(kpis?.totalRoles || 0)}
              </p>
            </div>
          </div>
        </div>

        <div className="card p-4">
          <div className="flex items-center">
            <div className="flex-shrink-0">
              <Users className="h-6 w-6 text-pink-600" />
            </div>
            <div className="ml-3">
              <p className="text-xs font-medium text-gray-500">Devs</p>
              <p className="text-lg font-bold text-gray-900">
                {formatNumber(kpis?.totalDevelopers || 0)}
              </p>
            </div>
          </div>
        </div>

        <div className="card p-4">
          <div className="flex items-center">
            <div className="flex-shrink-0">
              <Layers className="h-6 w-6 text-cyan-600" />
            </div>
            <div className="ml-3">
              <p className="text-xs font-medium text-gray-500">Stacks</p>
              <p className="text-lg font-bold text-gray-900">
                {formatNumber(kpis?.totalStacks || 0)}
              </p>
            </div>
          </div>
        </div>
      </div>

      {/* PR x Review x Comments (Full Width Chart) */}
      <div className="card p-6">
        <h3 className="text-lg font-medium text-gray-900 mb-4">PR x Review x Comments</h3>
                  {prReviewComments && prReviewComments.length > 0 && prReviewComments.every((item: any) => item && item.developer && item.developer.name) ? (
            <div style={{ height: '400px' }}>
              <ReactApexChart
                options={{
                  chart: {
                    type: 'line',
                    toolbar: {
                      show: false
                    },
                    zoom: {
                      enabled: false
                    }
                  },
                  stroke: {
                    width: [0, 3, 2, 2],
                    curve: 'smooth'
                  },
                  xaxis: {
                    categories: prReviewComments.map((item: any) => item.developer.name),
                    labels: {
                      rotate: -45,
                      style: {
                        fontSize: '12px'
                      }
                    }
                  },
                  yaxis: {
                    title: {
                      text: undefined
                    }
                  },
                  tooltip: {
                    shared: true,
                    intersect: false,
                    y: {
                      formatter: function (val) {
                        return val.toString()
                      }
                    }
                  },
                  legend: {
                    position: 'top',
                    horizontalAlign: 'left',
                    offsetX: 40
                  },
                                      colors: [COLORS.secondary, COLORS.purple, COLORS.accent, COLORS.primary],
                  fill: {
                    opacity: [1, 1, 1, 1]
                  },
                  plotOptions: {
                    bar: {
                      horizontal: false
                    }
                  }
                }}
                series={[
                  {
                    name: 'Reviews',
                    type: 'column',
                    data: prReviewComments.map((item: any) => item.reviews)
                  },
                  {
                    name: 'Média PR',
                    type: 'line',
                    data: prReviewComments.map((item: any) => item.averagePRs)
                  },
                  {
                    name: 'Comments',
                    type: 'line',
                    data: prReviewComments.map((item: any) => item.comments)
                  },
                  {
                    name: 'Pull Requests',
                    type: 'line',
                    data: prReviewComments.map((item: any) => item.pullRequests)
                  }
                ]}
                type="line"
                height={400}
              />
            </div>
        ) : (
          <div className="flex items-center justify-center h-64 text-gray-500">
            <p>Nenhum dado disponível para este gráfico</p>
          </div>
        )}
      </div>

      {/* Charts Grid */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* PR x Commit por Time */}
        <div className="card p-6">
          <h3 className="text-lg font-medium text-gray-900 mb-4">Pull Request x Commit por Time</h3>
          <p className="text-sm text-gray-500 mb-4">
            Ideal: 1 commit por PR (ratio próximo de 1:1)
          </p>
          {prCommitData && prCommitData.length > 0 && prCommitData.every((item: any) => item && item.team && item.team.name) ? (
            <div style={{ height: '300px' }}>
              <ReactApexChart
                options={{
                  chart: {
                    type: 'bar',
                    stacked: true,
                    stackType: '100%',
                    toolbar: {
                      show: false
                    }
                  },
                  plotOptions: {
                    bar: {
                      horizontal: true,
                      dataLabels: {
                        position: 'center',
                      }
                    }
                  },
                  dataLabels: {
                    enabled: false
                  },
                  xaxis: {
                    title: {
                      text: 'Quantidade'
                    }
                  },
                  yaxis: {
                    title: {
                      text: 'Times'
                    }
                  },
                  tooltip: {
                    shared: false,
                    y: {
                      formatter: function (val) {
                        return val.toString()
                      }
                    }
                  },
                  fill: {
                    opacity: 1
                  },
                  legend: {
                    position: 'top',
                    horizontalAlign: 'left',
                    offsetX: 40
                  },
                                      colors: [COLORS.primary, COLORS.secondary]
                }}
                series={[
                  {
                    name: 'Pull Requests',
                    data: prCommitData.map((item: any) => ({
                      x: item?.team?.name || 'Time Desconhecido',
                      y: item?.pullRequests || 0
                    }))
                  },
                  {
                    name: 'Commits',
                    data: prCommitData.map((item: any) => ({
                      x: item?.team?.name || 'Time Desconhecido',
                      y: item?.commits || 0
                    }))
                  }
                ]}

                type="bar"
                height={300}
              />
            </div>
          ) : (
            <div className="flex items-center justify-center h-64 text-gray-500">
              <p>Nenhum dado disponível para este gráfico</p>
            </div>
          )}
        </div>

        {/* Pull Request x Review por Time */}
        <div className="card p-6">
          <h3 className="text-lg font-medium text-gray-900 mb-4">Pull Request x Review por Time</h3>
          <p className="text-sm text-gray-500 mb-4">
            Ideal: 1 review por PR (ratio próximo de 1:1)
          </p>
          {prReviewData && prReviewData.length > 0 && prReviewData.every((item: any) => item && item.team && item.team.name) ? (
            <div style={{ height: '300px' }}>
              <ReactApexChart
                options={{
                  chart: {
                    type: 'bar',
                    stacked: true,
                    stackType: '100%',
                    toolbar: {
                      show: false
                    }
                  },
                  plotOptions: {
                    bar: {
                      horizontal: true,
                      dataLabels: {
                        position: 'center',
                      }
                    }
                  },
                  dataLabels: {
                    enabled: false
                  },
                  stroke: {
                    width: 1,
                    colors: ['#fff']
                  },
                  xaxis: {
                    title: {
                      text: 'Quantidade'
                    }
                  },
                  yaxis: {
                    title: {
                      text: 'Times'
                    }
                  },
                  tooltip: {
                    shared: false,
                    y: {
                      formatter: function (val) {
                        return val.toString()
                      }
                    }
                  },
                  fill: {
                    opacity: 1
                  },
                  legend: {
                    position: 'top',
                    horizontalAlign: 'left',
                    offsetX: 40
                  },
                  colors: [COLORS.primary, COLORS.secondary]
                }}
                series={[
                  {
                    name: 'Pull Requests',
                    data: prReviewData.map((item: any) => ({
                      x: item?.team?.name || 'Time Desconhecido',
                      y: item?.pullRequests || 0
                    }))
                  },
                  {
                    name: 'Reviews',
                    data: prReviewData.map((item: any) => ({
                      x: item?.team?.name || 'Time Desconhecido',
                      y: item?.reviews || 0
                    }))
                  }
                ]}
                type="bar"
                height={300}
              />
            </div>
          ) : (
            <div className="flex items-center justify-center h-64 text-gray-500">
              <p>Nenhum dado disponível para este gráfico</p>
            </div>
          )}
        </div>
      </div>

      {/* Additional Charts */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Reviews realizados por Time */}
        <div className="card p-6">
          <h3 className="text-lg font-medium text-gray-900 mb-4">Reviews realizados</h3>
          {reviewsPerformedData && reviewsPerformedData.length > 0 && reviewsPerformedData.every((item: any) => item && item.team && item.team.name) ? (
            <div style={{ height: '300px' }}>
              <ReactApexChart
                options={{
                  chart: {
                    type: 'bar',
                    toolbar: {
                      show: false
                    }
                  },
                  plotOptions: {
                    bar: {
                      horizontal: false,
                      dataLabels: {
                        position: 'top',
                      },
                    }
                  },
                  dataLabels: {
                    enabled: true,
                    style: {
                      colors: [COLORS.labelWhite],
                      fontWeight: 'bold',
                      fontSize: '14px'
                    },
                    formatter: function (val) {
                      return (val as number).toFixed(0)
                    }
                  },
                  xaxis: {
                    categories: reviewsPerformedData.map((item: any) => item.team.name),
                    labels: {
                      style: {
                        fontSize: '12px'
                      }
                    }
                  },
                  yaxis: {
                    title: {
                      text: 'Reviews'
                    }
                  },
                  tooltip: {
                    y: {
                      formatter: function (val) {
                        return val.toString()
                      }
                    }
                  },
                  colors: [COLORS.primary],
                  fill: {
                    opacity: 1
                  }
                }}
                series={[
                  {
                    name: 'Reviews',
                    data: reviewsPerformedData.map((item: any) => item.count)
                  }
                ]}
                type="bar"
                height={300}
              />
            </div>
          ) : (
            <div className="flex items-center justify-center h-64 text-gray-500">
              <p>Nenhum dado disponível para este gráfico</p>
            </div>
          )}
        </div>

        {/* Cargos por Time */}
        <div className="card p-6">
          <h3 className="text-lg font-medium text-gray-900 mb-4">Cargos por Time</h3>
          {kpis?.rolesByTeam && kpis.rolesByTeam.length > 0 && kpis.rolesByTeam.every((item: any) => item && item.name) ? (
            <div style={{ height: '300px' }}>
              <ReactApexChart
                options={{
                  chart: {
                    type: 'pie',
                    toolbar: {
                      show: false
                    }
                  },
                  labels: kpis.rolesByTeam.map((item: any) => item.name),
                  dataLabels: {
                    enabled: true,
                    formatter: function (val) {
                      return (val as number).toFixed(0) + '%'
                    }
                  },
                  tooltip: {
                    y: {
                      formatter: function (val) {
                        return val.toString()
                      }
                    }
                  },
                  legend: {
                    position: 'bottom'
                  },
                  colors: COLORS.array
                }}
                series={kpis.rolesByTeam.map((item: any) => item.count)}
                type="pie"
                height={300}
              />
            </div>
          ) : (
            <div className="flex items-center justify-center h-64 text-gray-500">
              <p>Nenhum dado disponível para este gráfico</p>
            </div>
          )}
        </div>
      </div>

      {/* Arquivos alterados por Pull Request e Cycle Time */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Arquivos alterados por Pull Request */}
        <div className="card p-6">
          <h3 className="text-lg font-medium text-gray-900 mb-4">Arquivos alterados por Pull Request</h3>
          {filesChangedData && filesChangedData.length > 0 && filesChangedData.every((item: any) => item && item.team && item.team.name) ? (
            <div style={{ height: '300px' }}>
              <ReactApexChart
                options={{
                  chart: {
                    type: 'line',
                    toolbar: {
                      show: false
                    },
                    zoom: {
                      enabled: false
                    }
                  },
                  stroke: { width: [0, 0, 3], curve: 'smooth' },
                  plotOptions: {
                    bar: {
                      horizontal: false,
                      dataLabels: {
                        position: 'top',
                      },
                    }
                  },
                  dataLabels: {
                    enabled: true,
                    style: {
                      colors: [COLORS.labelWhite, COLORS.labelWhite, COLORS.labelBlack],
                      fontWeight: 'bold',
                      fontSize: '12px'
                    },
                    background: {
                      enabled: false
                    },
                    formatter: function (val, opts) {
                      // Only show labels for columns (series 0 and 1), not for line (series 2)
                      if (opts.seriesIndex === 2) {
                        return ''
                      }
                      return (val as number).toFixed(0)
                    }
                  },
                  xaxis: {
                    categories: filesChangedData.map((item: any) => item.team.name),
                    labels: {
                      style: {
                        fontSize: '12px'
                      }
                    }
                  },
                  yaxis: [
                    {
                      title: {
                        text: 'Arquivos'
                      }
                    },
                    {
                      opposite: true,
                      title: {
                        text: 'Pull Requests'
                      }
                    }
                  ],
                  tooltip: {
                    shared: true,
                    intersect: false,
                    y: { formatter: function (val) { return val.toString() } }
                  },
                  legend: { position: 'top', horizontalAlign: 'left', offsetX: 40 },
                  colors: [COLORS.primary, COLORS.secondary, COLORS.purple],
                  fill: { opacity: [1, 1, 1] }
                }}
                series={[
                  {
                    name: 'Média Arquivos',
                    type: 'column',
                    data: filesChangedData.map((item: any) => item.averageFilesChanged)
                  },
                  {
                    name: 'Total Arquivos',
                    type: 'column',
                    data: filesChangedData.map((item: any) => item.totalFilesChanged)
                  },
                  {
                    name: 'Pull Requests',
                    type: 'line',
                    data: filesChangedData.map((item: any) => item.pullRequests)
                  }
                ]}
                type="line"
                height={300}
              />
            </div>
          ) : (
            <div className="flex items-center justify-center h-64 text-gray-500">
              <p>Nenhum dado disponível para este gráfico</p>
            </div>
          )}
        </div>

        {/* Média Cycle time Pull Request (dias) */}
        <div className="card p-6">
          <h3 className="text-lg font-medium text-gray-900 mb-4">Média Cycle time Pull Request (dias)</h3>
          {cycleTimeByTeamData && cycleTimeByTeamData.length > 0 && cycleTimeByTeamData.every((item: any) => item && item.team && item.team.name) ? (
            <div style={{ height: '300px' }}>
              <ReactApexChart
                options={{
                  chart: {
                    type: 'bar',
                    toolbar: {
                      show: false
                    }
                  },
                  plotOptions: {
                    bar: {
                      horizontal: false,
                      dataLabels: {
                        position: 'top',
                      },
                    }
                  },
                  dataLabels: {
                    enabled: true,
                    style: {
                      colors: [COLORS.labelWhite, COLORS.labelWhite],
                      fontWeight: 'bold',
                      fontSize: '12px'
                    },
                    background: {
                      enabled: false
                    },
                    formatter: function (val) {
                      return (val as number).toFixed(1) + ' dias'
                    }
                  },
                  xaxis: {
                    categories: cycleTimeByTeamData.map((item: any) => item.team.name),
                    labels: {
                      style: {
                        fontSize: '12px'
                      }
                    }
                  },
                  yaxis: {
                    title: {
                      text: 'Tempo (dias)'
                    }
                  },
                  tooltip: {
                    y: {
                      formatter: function (val) {
                        return (val as number).toFixed(1) + ' dias'
                      }
                    }
                  },
                  legend: { position: 'top', horizontalAlign: 'left', offsetX: 40 },
                  colors: [COLORS.primary, COLORS.secondary],
                  fill: {
                    opacity: 1
                  }
                }}
                series={[
                  {
                    name: 'Média Cycle Time',
                    data: cycleTimeByTeamData.map((item: any) => item.averageCycleTime)
                  },
                  {
                    name: 'Cycle Time Primeiro Review',
                    data: cycleTimeByTeamData.map((item: any) => item.averageReviewTime)
                  }
                ]}
                type="bar"
                height={300}
              />
            </div>
          ) : (
            <div className="flex items-center justify-center h-64 text-gray-500">
              <p>Nenhum dado disponível para este gráfico</p>
            </div>
          )}
        </div>
      </div>

      {/* Top 10 Cycle Time Pull Requests Table */}
      <div className="card">
        <div className="px-6 py-4 border-b border-gray-200">
          <h3 className="text-lg font-medium text-gray-900">Top 10 - Cycle time Pull Request (dias)</h3>
          <p className="text-sm text-gray-500 mt-1">
            CycleTime: tempo da abertura até a próxima atualização ou MERGED | Dias em Review: tempo que o PR ficou na fila desde que recebeu o primeiro review até ser MERGED
          </p>
        </div>
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Posição
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Time
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Título do PR
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Status
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Criação
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Primeiro Review
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Merged
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Cycle Time Total
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Dias em Review
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  DEV
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {topCycleTimePRs?.data && topCycleTimePRs.data.length > 0 ? (
                topCycleTimePRs.data.map((item: any) => (
                  <tr key={item.position}>
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                      #{item.position}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {item.team}
                    </td>
                    <td className="px-6 py-4 text-sm text-gray-900 max-w-xs truncate">
                      {item.title}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                        item.status === 'completed' ? 'bg-green-100 text-green-800' :
                        item.status === 'active' ? 'bg-blue-100 text-blue-800' :
                        item.status === 'abandoned' ? 'bg-red-100 text-red-800' :
                        'bg-gray-100 text-gray-800'
                      }`}>
                        {item.status === 'completed' ? 'Completo' :
                         item.status === 'active' ? 'Aberto' :
                         item.status === 'abandoned' ? 'Abandonado' :
                         item.status}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {new Date(item.createdAt).toLocaleDateString('pt-BR')}
                      <br />
                      <span className="text-xs text-gray-400">
                        {new Date(item.createdAt).toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' })}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {item.reviewTimeDays ? `${item.reviewTimeDays.toFixed(1)} dias` : '-'}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {item.mergedAt ? new Date(item.mergedAt).toLocaleDateString('pt-BR') : '-'}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                      {item.cycleTimeDays ? `${item.cycleTimeDays.toFixed(1)} dias` : '-'}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {item.reviewTimeDays ? `${item.reviewTimeDays.toFixed(1)} dias` : '-'}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      {item.developer}
                    </td>
                  </tr>
                ))
              ) : (
                <tr>
                  <td colSpan={10} className="px-6 py-4 text-center text-gray-500">
                    Nenhum Pull Request encontrado
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  )
}
